import { Timestamp, GeoPoint } from "firebase/firestore";
import { markRaw } from "vue";
import {
  definePayloadPlugin,
  definePayloadReducer,
  definePayloadReviver
} from "#imports";
export default definePayloadPlugin(() => {
  definePayloadReducer(
    "FirebaseTimestamp",
    (data) => data instanceof Timestamp && data.toJSON()
  );
  definePayloadReviver(
    "FirebaseTimestamp",
    (data) => {
      return markRaw(new Timestamp(data.seconds, data.nanoseconds));
    }
  );
  definePayloadReducer(
    "FirebaseGeoPoint",
    (data) => data instanceof GeoPoint && data.toJSON()
  );
  definePayloadReviver(
    "FirebaseGeoPoint",
    (data) => {
      return markRaw(new GeoPoint(data.latitude, data.longitude));
    }
  );
  definePayloadReducer("DocumentData", (data) => {
    if (data && typeof data === "object") {
      const idProp = Object.getOwnPropertyDescriptor(data, "id");
      if (idProp && !idProp.enumerable) {
        return {
          ...data,
          id: data.id
        };
      }
    }
  });
  definePayloadReviver(
    "DocumentData",
    (data) => {
      const parsed = typeof data === "string" ? JSON.parse(data) : data;
      const idValue = parsed.id;
      delete parsed.id;
      return Object.defineProperty(parsed, "id", {
        value: idValue
      });
    }
  );
});
